<SSAFunction name:_dispatch hash:0x0 offset:0x0 num_blocks:1 blocks:<SSABasicBlock offset:0x0 num_insns:5 in: [] insns:[
	<0x4: MSTORE(#40, #60)>
	<0x7: %3 = CALLDATASIZE()>
	<0x8: %4 = LT(%3, #4)>
	<0xc: JUMPI(#62, %4)>
	<0xc: ICALL(_fallthrough)>
] fallthrough:None jumps:[0x62]>>

<SSAFunction name:_fallthrough hash:0x0 offset:0xd num_blocks:5 blocks:<SSABasicBlock offset:0xd num_insns:5 in: [] insns:[
	<0xf: %7 = CALLDATALOAD(#0)>
	<0x2f: %9 = DIV(%7, #100000000000000000000000000000000000000000000000000000000)>
	<0x35: %11 = AND(#ffffffff, %9)>
	<0x3c: %13 = EQ(#5c19a95c, %11)>
	<0x0: ICONDCALL(delegate(address), %13)>
] fallthrough:0x41 jumps:None>
<SSABasicBlock offset:0x41 num_insns:2 in: [0xd] insns:[
	<0x47: %16 = EQ(#609ff1bd, %11)>
	<0x0: ICONDCALL(winningProposal(), %16)>
] fallthrough:0x4c jumps:None>
<SSABasicBlock offset:0x4c num_insns:2 in: [0x41] insns:[
	<0x52: %19 = EQ(#9e7b8d61, %11)>
	<0x0: ICONDCALL(giveRightToVote(address), %19)>
] fallthrough:0x57 jumps:None>
<SSABasicBlock offset:0x57 num_insns:2 in: [0x4c] insns:[
	<0x5d: %22 = EQ(#b3f98adc, %11)>
	<0x0: ICONDCALL(vote(uint8), %22)>
] fallthrough:0x62 jumps:None>
<SSABasicBlock offset:0x62 num_insns:1 in: [0x0,0x57] insns:[
	<0x66: REVERT(#0, #0)>
] fallthrough:None jumps:None>>

<SSAFunction name:delegate(address) hash:0x5c19a95c offset:0x67 num_blocks:15 blocks:<SSABasicBlock offset:0x67 num_insns:3 in: [] insns:[
	<0x68: %25 = CALLVALUE()>
	<0x69: %26 = ISZERO(%25)>
	<0x6d: JUMPI(#72, %26)>
] fallthrough:0x6e jumps:[0x72]>
<SSABasicBlock offset:0x6e num_insns:1 in: [0x67] insns:[
	<0x71: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x72 num_insns:2 in: [0x67] insns:[
	<0x7a: %31 = CALLDATALOAD(#4)    // ADDRESS>
	<0x9d: JUMP(#12e)>
] fallthrough:None jumps:[0x12e]>
<SSABasicBlock offset:0x9e num_insns:1 in: [0x12e,0x32b,0x444,0x464] insns:[
	<0x9f: STOP()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x12e num_insns:9 in: [0x72] insns:[
	<0x136: %81 = CALLER()    // ADDRESS>
	<0x164: MSTORE(#0, %81)>
	<0x16a: MSTORE(#20, #1)>
	<0x170: %91 = SHA3(#0, #40)>
	<0x176: %93 = ADD(#1, %91)>
	<0x17a: %95 = SLOAD(%93)>
	<0x184: %100 = AND(#ff, %95)>
	<0x185: %101 = ISZERO(%100)>
	<0x189: JUMPI(#18e, %101)>
] fallthrough:0x9e jumps:[0x18f]>
<SSABasicBlock offset:0x18f num_insns:14 in: [0x12e,0x2c2] insns:[
	<0x18f: %472 = PHI(%31, %184)>
	<0x1c2: %110 = AND(#ffffffffffffffffffffffffffffffffffffffff, %472)>
	<0x1d8: %112 = AND(#ffffffffffffffffffffffffffffffffffffffff, %110)>
	<0x1da: MSTORE(#0, %112)>
	<0x1e0: MSTORE(#20, #1)>
	<0x1e6: %118 = SHA3(#0, #40)>
	<0x1e9: %120 = ADD(#1, %118)>
	<0x1ed: %122 = SLOAD(%120)>
	<0x1f4: %125 = DIV(%122, #10000)>
	<0x20a: %127 = AND(#ffffffffffffffffffffffffffffffffffffffff, %125)>
	<0x220: %129 = AND(#ffffffffffffffffffffffffffffffffffffffff, %127)>
	<0x221: %130 = EQ(%129, #0)>
	<0x222: %131 = ISZERO(%130)>
	<0x228: JUMPI(#2bc, %130)>
] fallthrough:0x229 jumps:[0x2bc]>
<SSABasicBlock offset:0x229 num_insns:13 in: [0x18f] insns:[
	<0x22a: %134 = CALLER()    // ADDRESS>
	<0x25b: %140 = AND(#ffffffffffffffffffffffffffffffffffffffff, %472)>
	<0x271: %142 = AND(#ffffffffffffffffffffffffffffffffffffffff, %140)>
	<0x273: MSTORE(#0, %142)>
	<0x279: MSTORE(#20, #1)>
	<0x27f: %148 = SHA3(#0, #40)>
	<0x282: %150 = ADD(#1, %148)>
	<0x286: %152 = SLOAD(%150)>
	<0x28d: %155 = DIV(%152, #10000)>
	<0x2a3: %157 = AND(#ffffffffffffffffffffffffffffffffffffffff, %155)>
	<0x2b9: %159 = AND(#ffffffffffffffffffffffffffffffffffffffff, %157)>
	<0x2ba: %160 = EQ(%159, %134)>
	<0x2bb: %161 = ISZERO(%160)>
] fallthrough:0x2bc jumps:None>
<SSABasicBlock offset:0x2bc num_insns:3 in: [0x18f,0x229] insns:[
	<0x2bc: %473 = PHI(%131, %161)>
	<0x2bd: %162 = ISZERO(%473)>
	<0x2c1: JUMPI(#32b, %162)>
] fallthrough:0x2c2 jumps:[0x32b]>
<SSABasicBlock offset:0x2c2 num_insns:10 in: [0x2bc] insns:[
	<0x2dc: %167 = AND(#ffffffffffffffffffffffffffffffffffffffff, %472)>
	<0x2f2: %169 = AND(#ffffffffffffffffffffffffffffffffffffffff, %167)>
	<0x2f4: MSTORE(#0, %169)>
	<0x2fa: MSTORE(#20, #1)>
	<0x300: %175 = SHA3(#0, #40)>
	<0x303: %177 = ADD(#1, %175)>
	<0x307: %179 = SLOAD(%177)>
	<0x30e: %182 = DIV(%179, #10000)>
	<0x324: %184 = AND(#ffffffffffffffffffffffffffffffffffffffff, %182)>
	<0x32a: JUMP(#18f)>
] fallthrough:None jumps:[0x18f]>
<SSABasicBlock offset:0x32b num_insns:5 in: [0x2bc] insns:[
	<0x32c: %186 = CALLER()    // ADDRESS>
	<0x359: %190 = AND(#ffffffffffffffffffffffffffffffffffffffff, %472)>
	<0x35a: %191 = EQ(%190, %186)>
	<0x35b: %192 = ISZERO(%191)>
	<0x35f: JUMPI(#364, %192)>
] fallthrough:0x9e jumps:[0x364]>
<SSABasicBlock offset:0x364 num_insns:24 in: [0x32b] insns:[
	<0x36a: %197 = ADD(#1, %91)>
	<0x372: %201 = SLOAD(%197)>
	<0x378: %205 = AND(#ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00, %201)>
	<0x37b: %206 = ISZERO(#1)>
	<0x37c: %207 = ISZERO(%206)>
	<0x37e: %209 = OR(%207, %205)>
	<0x380: SSTORE(%197, %209)>
	<0x386: %211 = ADD(#1, %91)>
	<0x38e: %215 = SLOAD(%211)>
	<0x3a7: %219 = AND(#ffffffffffffffffffff0000000000000000000000000000000000000000ffff, %215)>
	<0x3bf: %221 = AND(#ffffffffffffffffffffffffffffffffffffffff, %472)>
	<0x3c0: %222 = MUL(%221, #10000)>
	<0x3c1: %223 = OR(%222, %219)>
	<0x3c3: SSTORE(%211, %223)>
	<0x3df: %227 = AND(#ffffffffffffffffffffffffffffffffffffffff, %472)>
	<0x3f5: %229 = AND(#ffffffffffffffffffffffffffffffffffffffff, %227)>
	<0x3f7: MSTORE(#0, %229)>
	<0x3fd: MSTORE(#20, #1)>
	<0x403: %235 = SHA3(#0, #40)>
	<0x409: %237 = ADD(#1, %235)>
	<0x40d: %239 = SLOAD(%237)>
	<0x417: %244 = AND(#ff, %239)>
	<0x418: %245 = ISZERO(%244)>
	<0x41c: JUMPI(#464, %245)>
] fallthrough:0x41d jumps:[0x464]>
<SSABasicBlock offset:0x41d num_insns:9 in: [0x364] insns:[
	<0x421: %249 = SLOAD(%91)>
	<0x427: %252 = ADD(#1, %235)>
	<0x42b: %254 = SLOAD(%252)>
	<0x432: %257 = DIV(%254, #100)>
	<0x435: %259 = AND(#ff, %257)>
	<0x438: %261 = AND(#ff, %259)>
	<0x43a: %262 = SLOAD(#2)>
	<0x43c: %263 = LT(%261, %262)>
	<0x442: JUMPI(#444, %263)>
] fallthrough:0x443 jumps:[0x444]>
<SSABasicBlock offset:0x443 num_insns:1 in: [0x41d] insns:[
	<0x443: INVALID()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x444 num_insns:7 in: [0x41d] insns:[
	<0x448: MSTORE(#0, #2)>
	<0x44d: %270 = SHA3(#0, #20)>
	<0x44f: %271 = ADD(%261, %270)>
	<0x457: %275 = SLOAD(%271)>
	<0x458: %276 = ADD(%275, %249)>
	<0x45e: SSTORE(%271, %276)>
	<0x463: JUMP(#47b)>
] fallthrough:None jumps:[0x9e]>
<SSABasicBlock offset:0x464 num_insns:4 in: [0x364] insns:[
	<0x469: %280 = SLOAD(%91)>
	<0x472: %284 = SLOAD(%235)>
	<0x473: %285 = ADD(%284, %280)>
	<0x479: SSTORE(%235, %285)>
] fallthrough:0x9e jumps:None>>

<SSAFunction name:winningProposal() hash:0x609ff1bd offset:0xa0 num_blocks:11 blocks:<SSABasicBlock offset:0xa0 num_insns:3 in: [] insns:[
	<0xa1: %37 = CALLVALUE()>
	<0xa2: %38 = ISZERO(%37)>
	<0xa6: JUMPI(#ab, %38)>
] fallthrough:0xa7 jumps:[0x48e]>
<SSABasicBlock offset:0xa7 num_insns:1 in: [0xa0] insns:[
	<0xaa: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xb3 num_insns:8 in: [0x48e] insns:[
	<0xb6: %44 = MLOAD(#40)>
	<0xbb: %46 = AND(#ff, %471)>
	<0xbe: %48 = AND(#ff, %46)>
	<0xc0: MSTORE(%44, %48)>
	<0xc3: %50 = ADD(#20, %44)>
	<0xc9: %52 = MLOAD(#40)>
	<0xcc: %53 = SUB(%50, %52)>
	<0xce: RETURN(%52, %53)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x48e num_insns:8 in: [0xa0,0x4ed] insns:[
	<0x48e: %471 = PHI(#0, %470)>
	<0x48e: %470 = PHI(#0, %332)>
	<0x48e: %481 = PHI(#0, %330)>
	<0x492: %290 = SLOAD(#2)>
	<0x498: %292 = AND(#ff, %470)>
	<0x499: %293 = LT(%292, %290)>
	<0x49a: %294 = ISZERO(%293)>
	<0x49e: JUMPI(#4fa, %294)>
] fallthrough:0x49f jumps:[0xb3]>
<SSABasicBlock offset:0x49f num_insns:4 in: [0x48e] insns:[
	<0x4a5: %298 = AND(#ff, %470)>
	<0x4a7: %299 = SLOAD(#2)>
	<0x4a9: %300 = LT(%298, %299)>
	<0x4af: JUMPI(#4b1, %300)>
] fallthrough:0x4b0 jumps:[0x4b1]>
<SSABasicBlock offset:0x4b0 num_insns:1 in: [0x49f] insns:[
	<0x4b0: INVALID()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x4b1 num_insns:7 in: [0x49f] insns:[
	<0x4b5: MSTORE(#0, #2)>
	<0x4ba: %307 = SHA3(#0, #20)>
	<0x4bc: %308 = ADD(%298, %307)>
	<0x4c0: %311 = SLOAD(%308)>
	<0x4c1: %312 = GT(%311, %481)>
	<0x4c2: %313 = ISZERO(%312)>
	<0x4c6: JUMPI(#4ed, %313)>
] fallthrough:0x4c7 jumps:[0x4ed]>
<SSABasicBlock offset:0x4c7 num_insns:4 in: [0x4b1] insns:[
	<0x4cc: %317 = AND(#ff, %470)>
	<0x4ce: %318 = SLOAD(#2)>
	<0x4d0: %319 = LT(%317, %318)>
	<0x4d6: JUMPI(#4d8, %319)>
] fallthrough:0x4d7 jumps:[0x4d8]>
<SSABasicBlock offset:0x4d7 num_insns:1 in: [0x4c7] insns:[
	<0x4d7: INVALID()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x4d8 num_insns:4 in: [0x4c7] insns:[
	<0x4dc: MSTORE(#0, #2)>
	<0x4e1: %326 = SHA3(#0, #20)>
	<0x4e3: %327 = ADD(%317, %326)>
	<0x4e7: %330 = SLOAD(%327)>
] fallthrough:0x4ed jumps:None>
<SSABasicBlock offset:0x4ed num_insns:2 in: [0x4b1,0x4d8] insns:[
	<0x4f2: %332 = ADD(#1, %470)>
	<0x4f9: JUMP(#48e)>
] fallthrough:None jumps:[0x48e]>>

<SSAFunction name:giveRightToVote(address) hash:0x9e7b8d61 offset:0xcf num_blocks:8 blocks:<SSABasicBlock offset:0xcf num_insns:3 in: [] insns:[
	<0xd0: %54 = CALLVALUE()>
	<0xd1: %55 = ISZERO(%54)>
	<0xd5: JUMPI(#da, %55)>
] fallthrough:0xd6 jumps:[0xda]>
<SSABasicBlock offset:0xd6 num_insns:1 in: [0xcf] insns:[
	<0xd9: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xda num_insns:2 in: [0xcf] insns:[
	<0xe2: %60 = CALLDATALOAD(#4)    // ADDRESS>
	<0x105: JUMP(#4ff)>
] fallthrough:None jumps:[0x4ff]>
<SSABasicBlock offset:0x106 num_insns:1 in: [0x5a7,0x5b1] insns:[
	<0x107: STOP()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x4ff num_insns:5 in: [0xda] insns:[
	<0x504: %335 = SLOAD(#0)    // ADDRESS>
	<0x538: %343 = CALLER()    // ADDRESS>
	<0x54f: %346 = EQ(%343, %335)>
	<0x550: %347 = ISZERO(%346)>
	<0x555: JUMPI(#5a7, %347)>
] fallthrough:0x556 jumps:[0x5a7]>
<SSABasicBlock offset:0x556 num_insns:6 in: [0x4ff] insns:[
	<0x589: MSTORE(#0, %60)>
	<0x58f: MSTORE(#20, #1)>
	<0x595: %360 = SHA3(#0, #40)>
	<0x598: %362 = ADD(#1, %360)>
	<0x59c: %364 = SLOAD(%362)>
	<0x5a6: %369 = AND(#ff, %364)>
] fallthrough:0x5a7 jumps:None>
<SSABasicBlock offset:0x5a7 num_insns:3 in: [0x4ff,0x556] insns:[
	<0x5a7: %482 = PHI(%347, %369)>
	<0x5a8: %370 = ISZERO(%482)>
	<0x5ac: JUMPI(#5b1, %370)>
] fallthrough:0x106 jumps:[0x5b1]>
<SSABasicBlock offset:0x5b1 num_insns:4 in: [0x5a7] insns:[
	<0x5e5: MSTORE(#0, %60)>
	<0x5eb: MSTORE(#20, #1)>
	<0x5f1: %384 = SHA3(#0, #40)>
	<0x5f7: SSTORE(%384, #1)>
] fallthrough:0x106 jumps:None>>

<SSAFunction name:vote(uint8) hash:0xb3f98adc offset:0x108 num_blocks:10 blocks:<SSABasicBlock offset:0x108 num_insns:3 in: [] insns:[
	<0x109: %66 = CALLVALUE()>
	<0x10a: %67 = ISZERO(%66)>
	<0x10e: JUMPI(#113, %67)>
] fallthrough:0x10f jumps:[0x113]>
<SSABasicBlock offset:0x10f num_insns:1 in: [0x108] insns:[
	<0x112: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x113 num_insns:3 in: [0x108] insns:[
	<0x11b: %72 = CALLDATALOAD(#4)>
	<0x11e: %74 = AND(#ff, %72)>
	<0x12b: JUMP(#5fc)>
] fallthrough:None jumps:[0x5fc]>
<SSABasicBlock offset:0x12c num_insns:1 in: [0x664,0x6bf] insns:[
	<0x12d: STOP()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x5fc num_insns:8 in: [0x113] insns:[
	<0x603: %390 = CALLER()    // ADDRESS>
	<0x631: MSTORE(#0, %390)>
	<0x637: MSTORE(#20, #1)>
	<0x63d: %400 = SHA3(#0, #40)>
	<0x643: %402 = ADD(#1, %400)>
	<0x647: %404 = SLOAD(%402)>
	<0x651: %409 = AND(#ff, %404)>
	<0x656: JUMPI(#664, %409)>
] fallthrough:0x657 jumps:[0x664]>
<SSABasicBlock offset:0x657 num_insns:4 in: [0x5fc] insns:[
	<0x65b: %412 = SLOAD(#2)>
	<0x661: %414 = AND(#ff, %74)>
	<0x662: %415 = LT(%414, %412)>
	<0x663: %416 = ISZERO(%415)>
] fallthrough:0x664 jumps:None>
<SSABasicBlock offset:0x664 num_insns:3 in: [0x5fc,0x657] insns:[
	<0x664: %483 = PHI(%409, %416)>
	<0x665: %417 = ISZERO(%483)>
	<0x669: JUMPI(#66e, %417)>
] fallthrough:0x12c jumps:[0x66e]>
<SSABasicBlock offset:0x66e num_insns:19 in: [0x664] insns:[
	<0x674: %422 = ADD(#1, %400)>
	<0x67c: %426 = SLOAD(%422)>
	<0x682: %430 = AND(#ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00, %426)>
	<0x685: %431 = ISZERO(#1)>
	<0x686: %432 = ISZERO(%431)>
	<0x688: %434 = OR(%432, %430)>
	<0x68a: SSTORE(%422, %434)>
	<0x690: %436 = ADD(#1, %400)>
	<0x698: %440 = SLOAD(%436)>
	<0x69e: %444 = AND(#ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff, %440)>
	<0x6a3: %446 = AND(#ff, %74)>
	<0x6a4: %447 = MUL(%446, #100)>
	<0x6a5: %448 = OR(%447, %444)>
	<0x6a7: SSTORE(%436, %448)>
	<0x6ad: %451 = SLOAD(%400)>
	<0x6b3: %454 = AND(#ff, %74)>
	<0x6b5: %455 = SLOAD(#2)>
	<0x6b7: %456 = LT(%454, %455)>
	<0x6bd: JUMPI(#6bf, %456)>
] fallthrough:0x6be jumps:[0x6bf]>
<SSABasicBlock offset:0x6be num_insns:1 in: [0x66e] insns:[
	<0x6be: INVALID()>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x6bf num_insns:6 in: [0x66e] insns:[
	<0x6c3: MSTORE(#0, #2)>
	<0x6c8: %463 = SHA3(#0, #20)>
	<0x6ca: %464 = ADD(%454, %463)>
	<0x6d2: %468 = SLOAD(%464)>
	<0x6d3: %469 = ADD(%468, %451)>
	<0x6d9: SSTORE(%464, %469)>
] fallthrough:0x12c jumps:None>>


Identified Functions:
	_dispatch argument offsets:[]
	_fallthrough argument offsets:[(0, 32)]
	delegate(address) argument offsets:[(4, 36)]
	winningProposal() argument offsets:[]
	giveRightToVote(address) argument offsets:[(4, 36)]
	vote(uint8) argument offsets:[(4, 36)]

Storage Locations: [0, 2]
Memory Locations: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Analyzing Memory Location: 33

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 34

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 35

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 36

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 37

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 38

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 39

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 40

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 41

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 42

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 43

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 44

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 45

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 46

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 47

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 48

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 49

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 50

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 51

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 52

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 53

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 54

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 55

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 56

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 57

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 58

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 59

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 60

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 61

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 62

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 63

	0x170: %91 = SHA3(#0, #40)
	0x1e6: %118 = SHA3(#0, #40)
	0x27f: %148 = SHA3(#0, #40)
	0x300: %175 = SHA3(#0, #40)
	0x403: %235 = SHA3(#0, #40)
	0x595: %360 = SHA3(#0, #40)
	0x5f1: %384 = SHA3(#0, #40)
	0x63d: %400 = SHA3(#0, #40)



Analyzing Memory Location: 64

	0x4: MSTORE(#40, #60)
	0xb6: %44 = MLOAD(#40)
	0xc9: %52 = MLOAD(#40)



Function _dispatch storage:
Function _fallthrough storage:
Function delegate(address) storage:
	Analyzing Storage Location: 2
		0x43a: %262 = SLOAD(#2)
		0x492: %290 = SLOAD(#2)
		0x4a7: %299 = SLOAD(#2)
		0x4ce: %318 = SLOAD(#2)
		0x65b: %412 = SLOAD(#2)
		0x6b5: %455 = SLOAD(#2)


Function winningProposal() storage:
	Analyzing Storage Location: 2
		0x43a: %262 = SLOAD(#2)
		0x492: %290 = SLOAD(#2)
		0x4a7: %299 = SLOAD(#2)
		0x4ce: %318 = SLOAD(#2)
		0x65b: %412 = SLOAD(#2)
		0x6b5: %455 = SLOAD(#2)


Function giveRightToVote(address) storage:
	Analyzing Storage Location: 0
		0x504: %335 = SLOAD(#0)    // ADDRESS


Function vote(uint8) storage:
	Analyzing Storage Location: 2
		0x43a: %262 = SLOAD(#2)
		0x492: %290 = SLOAD(#2)
		0x4a7: %299 = SLOAD(#2)
		0x4ce: %318 = SLOAD(#2)
		0x65b: %412 = SLOAD(#2)
		0x6b5: %455 = SLOAD(#2)


[+] Contract can not send ether.
[+] Contract calls:
[+] Wrote _dispatch to output/_dispatch.png
[+] Wrote _fallthrough to output/_fallthrough.png
[+] Wrote delegate(address) to output/delegate(address).png
[+] Wrote winningProposal() to output/winningProposal().png
[+] Wrote giveRightToVote(address) to output/giveRightToVote(address).png
[+] Wrote vote(uint8) to output/vote(uint8).png
